Array
	Find the second minimum element of an array
	First non-repeating integers in an array
	Merge two sorted arrays
	Rearrange positive and negative values in an array
	
Stacks
	Evaluate postfix expression using a stack
	Sort values in a stack
	Check balanced parentheses in an expression
	access the largest element in a stack
	
Queue
	1. Implement stack using a queue.
		a. Implement a queue ↴ with 2 stacks. 
		Your queue should have an enqueue and a dequeue method 
		and it should be "first in first out" (FIFO).
	Reverse first k elements of a queue
	Generate binary numbers from 1 to n using a queue
	
Linked List
	Reverse a linked list
	Detect loop in a linked list
	Return Nth node from the end in a linked list
	Remove duplicates from a linked list
	
Graphs
	Implement Breadth and Depth First Search
	Check if a graph is a tree or not
	Count number of edges in a graph
	Find the shortest path between two vertices
	
Trees
	Find the height of a binary tree
	Find kth maximum value in a binary search tree
	Find nodes at "k" distance from the root
	Find ancestors of a given node in a binary tree
	
Trie - Prefix trees
	Count total number of words in Trie
	Print all words stored in Trie
	Sort elements of an array using Trie
	Form words from a dictionary using Trie
	Build a T9 dictionary
	
Hash
	Find symmetric pairs in an array.
	Trace complete path of a journey.
	Find if an array is a subset of another array.
	Check if given arrays are disjoint.
	Write a function that takes an integer flight_length (in minutes) -
	and a list of integers movie_lengths (in minutes) and returns a -
	boolean indicating whether there are two numbers in movie_lengths whose sum equals flight_length.
	Write an efficient function that checks whether any permutation ↴ of an input string is a palindrome.
	Write a function that takes: a list of unsorted_scores the highest_possible_score in the game -
	and returns a sorted list of scores in less than O(nlgn) time.
